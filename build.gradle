buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        mavenCentral()
    }

    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.9.9'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

group 'me.kgustave'
archivesBaseName = "${group}.kson"
version '0.1'

sourceCompatibility = 1.8

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    test.kotlin.srcDirs += 'src/test/kotlin'

    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compileOnly 'org.json:json:20170516'

    testCompileOnly group: 'junit', name: 'junit', version: '4.12'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    logging.level = LogLevel.QUIET
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/dokkaJavadoc"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from "$buildDir/sources"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    //noinspection GroovyAssignabilityCheck
    from dokkaJavadoc.outputDirectory
}

task sources(type: Copy) {
    from 'src/main/kotlin'
    into "$buildDir/sources"
}

compileJava {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestJava {
    options.encoding = 'UTF-8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

wrapper {
    gradleVersion '4.0'
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar
    dependsOn shadowJar

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
    shadowJar.mustRunAfter sourcesJar
}